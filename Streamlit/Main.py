import streamlit as st
from PIL import Image
import pandas as pd
#Grafica barras
import mysql.connector
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import plotly.express as px 
import seaborn as sns
import time
import joblib
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import pickle
import dill
import toml
import base64
from io import BytesIO

# URLs para las im√°genes
manfred_url = "https://www.getmanfred.com/ofertas-empleo?onlyActive=false&currency=%E2%82%AC"
tecnoempleo_url = "https://www.tecnoempleo.com/ofertas-trabajo/"


st.set_page_config(page_title = "Empleos Extraccion", page_icon= "https://cdn.prod.website-files.com/5f3108520188e7588ef687b1/64e7429d8afae2bb6f5acd85_logo-hab-pez.svg",
                    layout ="wide",
                    initial_sidebar_state="collapsed" )

st.markdown(
    """
    <style>
    .stApp {
        background-color: black
;
    }
    </style>
    """,
    unsafe_allow_html=True
)


def pagina_principal():
    
    st.image("Streamlit/Data/portada.jpg", width=1850)

    st.write("---------------------------------------------------------------------------------------------------------------")

    # Crear 2 columnas
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("<h1 style='color: orange;'>Datos y gr√°ficas</h1>", unsafe_allow_html=True)
        st.write("""
            En este apartado se presentan las gr√°ficas y los datos relevantes que permiten visualizar
            y analizar de manera clara y concisa la informaci√≥n recopilada.
        """)

    with col2:
        st.markdown("<h1 style='color: white;'>B√∫squeda y comparador de empleos</h1>", unsafe_allow_html=True)
        st.write("""
            En este apartado se presenta una herramienta dise√±ada para facilitar la b√∫squeda y comparaci√≥n de empleos,
            permitiendo a los usuarios explorar diversas opciones laborales disponibles en el mercado. 
        """)

    with col1:
        st.markdown("<h1 style='color: white;'>Informaci√≥n PBI</h1>", unsafe_allow_html=True)
        st.write("""
            Utilizando Power BI, este comparador presenta visualizaciones din√°micas que te ayudar√°n a analizar las ofertas seg√∫n diferentes criterios
                  como ubicaci√≥n, salario, tipo de contrato y requisitos.
        """)

    with col2:
        st.markdown("<h1 style='color: orange;'>Cl√∫stering y Clasificaci√≥n</h1>", unsafe_allow_html=True)
        st.write("""
            En este apartado se exploran las t√©cnicas de Clustering y Clasificaci√≥n, dos enfoques clave en el an√°lisis de datos y aprendizaje autom√°tico. 
        """)

    with col1:
        st.markdown("<h1 style='color: orange;'>Arquitectura SQL</h1>", unsafe_allow_html=True)
        st.write("""
            Aqu√≠ se aborda la Arquitectura SQL, que es la estructura fundamental que soporta el almacenamiento, recuperaci√≥n y gesti√≥n de datos en sistemas de bases de datos. 
        """)

    with col2:
        st.markdown("<h1 style='color: white;'>About Us</h1>", unsafe_allow_html=True)
        st.write("""
            Conoce el equipo encargado de que conozcas mejor el mercado laboral que nos rodea actualmente. 
        """)

    st.write("---------------------------------------")

    # T√≠tulo principal
    st.title("Opiniones de Usuarios")

    # Texto introductorio
    st.markdown("""
        Aqu√≠ tienes algunas opiniones de nuestros usuarios. 
        ¬°Descubre lo que dicen sobre nuestra app!
    """)

    # Cuadrados de opiniones con estrellas
    st.markdown("""
        <style>
            .opinion-box {
                width: 300px;
                height: 150px;
                background-color: gray;
                border-radius: 10px;
                padding: 20px;
                margin: 20px;
                display: inline-block;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }
            .opinion-box h3 {
                font-size: 18px;
                margin-bottom: 10px;
            }
            .stars {
                color: gold;
                font-size: 20px;
            }
        </style>
        
        <div class="opinion-box">
            <h3>Liam Gonzalez</h3>
            <p>"Me llego el pedido frio no lo recomiendo"</p>
            <div class="stars">‚≠ê</div>
        </div>
        <div class="opinion-box">
            <h3>Luis Martinez</h3>
            <p>"Muy √∫til para analizar datos de manera r√°pida y efectiva."</p>
            <div class="stars">‚≠ê‚≠ê‚≠ê‚≠ê</div>
        </div>
        <div class="opinion-box">
            <h3>Raquel </h3>
            <p>"Gran experiencia, la interfaz es muy amigable y eficiente."</p>
            <div class="stars">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>
        </div>
        <div class="opinion-box">
            <h3>Joshua Metcalf</h3>
            <p>"La mejor app de empleo de toda la historia."</p>
            <div class="stars">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>
        </div>
    """, unsafe_allow_html=True)



def muestra_datos():
    st.markdown(
    """
    <h1 style="text-align: center;">DATOS Y GR√ÅFICAS üìä</h1>
    <p style="text-align: center; font-size: 20px;">
        -Aqu√≠ podr√°s observar patrones en las ofertas de empleo seleccionadas-
    </p>
    """,
    unsafe_allow_html=True)

     # Ruta al archivo HTML generado por folium
    ruta_html_provincias = "Streamlit/Data/mapa_cloropletico_espana.html"
    ruta_html_calor = "Streamlit/Data/mapa_calor_ciudades.html"
    ruta_html_comunidades = "Streamlit/Data/mapa_comunidades.html"


    mapa_seleccionado = st.selectbox(
    "Mapas:",
    ("Ofertas de empleo por provincia", "Ofertas de empleo por ciudad", "Ofertas de empleo por comunidad aut√≥noma"))

#    Leer el contenido de los archivos HTML
    if mapa_seleccionado == "Ofertas de empleo por provincia":
        with open(ruta_html_provincias, "r", encoding="utf-8") as f:
            html_content = f.read()
    elif mapa_seleccionado == "Ofertas de empleo por ciudad":
        with open(ruta_html_calor, "r", encoding="utf-8") as f:
            html_content = f.read()
    else:  # Mapa de comunidades
        with open(ruta_html_comunidades, "r", encoding="utf-8") as f:
            html_content = f.read()

    # Mostrar el mapa seleccionado
    st.components.v1.html(html_content, width=1400, height=600)

    ####################################################
    #Primera grafica/dividida


    # Conexi√≥n a la base de datos MySQL
    config = toml.load(".streamlit/secrets.toml")
    db_config = config["database"]

    db = mysql.connector.connect(host=db_config["host"],
                                user=db_config["user"],
                                password=db_config["password"],
                                database=db_config["database"]) 

    # Consulta SQL para Tecnolog√≠as
    query_tech = """
    SELECT 
        o.titulo, 
        tr.tec_id AS tecnologia, 
        COUNT(*) AS frecuencia,
        t.tecnologia AS nombre_tecnologia
    FROM 
        ofertas o
    JOIN 
        tecnologias_relacion tr ON o.id_oferta = tr.id_oferta
    JOIN 
        tecnologias t ON tr.tec_id = t.tec_id
    GROUP BY 
        o.titulo, tr.tec_id, t.tecnologia
    ORDER BY 
        o.titulo, frecuencia DESC;
    """

    # Consulta SQL para Habilidades
    query_skills = """
    SELECT 
        o.titulo, 
        hr.hab_id AS habilidad, 
        COUNT(*) AS frecuencia,
        h.habilidad AS nombre_habilidad
    FROM 
        ofertas o
    JOIN 
        habilidades_relacion hr ON o.id_oferta = hr.id_oferta
    JOIN 
        habilidades h ON hr.hab_id = h.hab_id
    GROUP BY 
        o.titulo, hr.hab_id, h.habilidad
    ORDER BY 
        o.titulo, frecuencia DESC;
    """

    # Leer datos desde la base de datos
    df_tech = pd.read_sql(query_tech, con=db)
    df_skills = pd.read_sql(query_skills, con=db)

    # Filtrar los 10 puestos con m√°s frecuencias
    top_titulos_tech = df_tech.groupby("titulo")["frecuencia"].sum().sort_values(ascending=False).head(10).index
    df_tech_filtered = df_tech[df_tech["titulo"].isin(top_titulos_tech)].groupby("titulo").apply(lambda x: x.nlargest(5, "frecuencia")).reset_index(drop=True)

    top_titulos_skills = df_skills.groupby("titulo")["frecuencia"].sum().sort_values(ascending=False).head(10).index
    df_skills_filtered = df_skills[df_skills["titulo"].isin(top_titulos_skills)].groupby("titulo").apply(lambda x: x.nlargest(5, "frecuencia")).reset_index(drop=True)

    # Configuraci√≥n de la p√°gina Streamlit
    st.title("Frecuencia de Tecnolog√≠as y Habilidades por Puesto de Trabajo")

    # Dividir la pantalla en dos columnas
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Tecnolog√≠as m√°s solicitadas")
        with st.expander("Ver datos"):
            st.dataframe(df_tech_filtered)
        fig_tech = px.sunburst(df_tech_filtered, 
                        path=["titulo", "nombre_tecnologia"], 
                        values="frecuencia",
                        title="Frecuencia de Tecnolog√≠as por Puesto de Trabajo",
                        color="frecuencia",
                        color_continuous_scale=px.colors.sequential.Turbo)
        st.plotly_chart(fig_tech)

    with col2:
        st.subheader("Habilidades m√°s solicitadas")
        with st.expander("Ver datos"):
            st.dataframe(df_skills_filtered)
        fig_skills = px.sunburst(df_skills_filtered, 
                        path=["titulo", "nombre_habilidad"], 
                        values="frecuencia",
                        title="Frecuencia de Habilidades por Puesto de Trabajo",
                        color="frecuencia",
                        color_continuous_scale=px.colors.sequential.Turbo)
        st.plotly_chart(fig_skills)


    st.write("Esta es una gr√°fica comparativa que muestra la frecuencia de tecnolog√≠a, a la izquierda y habilidades a la derecha,"
    " asociadas a distintos puestos de trabajo. En la parte de la leyenda podemos ver los colores de la frecuencia relativa que va desde 10 a 30  para poder visualizar qu√© tecnolog√≠as y habilidades sin m√°s recurrentes en ofertas laborales. su claridad.")

    ####################################################Primeragrafica B

    import plotly.graph_objects as go
    consulta_habilidades = """
    SELECT 
        h.habilidad,
        COUNT(hr.id_oferta) AS demanda,
        AVG((o.salario_desde + o.salario_hasta)/2) AS salario_promedio
    FROM habilidades_relacion hr
    JOIN habilidades h ON hr.hab_id = h.hab_id
    JOIN ofertas o ON hr.id_oferta = o.id_oferta
    WHERE o.salario_desde IS NOT NULL 
    AND o.salario_hasta IS NOT NULL
    GROUP BY h.habilidad
    ORDER BY demanda DESC
    LIMIT 10;
    """

    consulta_tecnologias = """
    SELECT 
        t.tecnologia,
        COUNT(tr.id_oferta) AS demanda,
        AVG((o.salario_desde + o.salario_hasta)/2) AS salario_promedio
    FROM tecnologias_relacion tr
    JOIN tecnologias t ON tr.tec_id = t.tec_id
    JOIN ofertas o ON tr.id_oferta = o.id_oferta
    GROUP BY t.tecnologia
    ORDER BY demanda DESC
    LIMIT 10;
    """

    # Cargar datos
    df_tech = pd.read_sql(consulta_tecnologias, db)
    df_hab = pd.read_sql(consulta_habilidades, db)

    # Crear subplots
    fig = make_subplots(rows=1, cols=2, 
                        subplot_titles=("Top 10 Tecnolog√≠as Demandadas", "Top 10 Habilidades Demandadas"),
                        horizontal_spacing=0.2)

    # Gr√°fico de Tecnolog√≠as
    fig.add_trace(go.Bar(
        x=df_tech["tecnologia"],
        y=df_tech["demanda"],
        marker=dict(color=df_tech["salario_promedio"], coloraxis="coloraxis"),
        name="Tecnolog√≠as",
    ), row=1, col=1)

    # Gr√°fico de Habilidades
    fig.add_trace(go.Bar(
        x=df_hab["habilidad"],
        y=df_hab["demanda"],
        marker=dict(color=df_hab["salario_promedio"], coloraxis="coloraxis"),
        name="Habilidades",
    ), row=1, col=2)

    # Configuraci√≥n de color y leyenda
    fig.update_layout(
        coloraxis=dict(colorscale="Viridis", colorbar=dict(
            title="Salario Promedio (‚Ç¨)",  
            title_side="top",
            ticksuffix=" ‚Ç¨")),
        showlegend=False)

    # Mostrar el gr√°fico en Streamlit
    st.title("Comparativa de Tecnolog√≠as y Habilidades Demandadas")
    st.plotly_chart(fig)

    st.write("Estos gr√°ficos de barras comparan las 10 tecnolog√≠as y habilidades m√°s demandadas en el mercado laboral,"
    " mostrando tanto la cantidad de ofertas disponibles como el salario asociado a cada una. En el apartado de tecnolog√≠as,"
    " **Python** se posiciona como la m√°s solicitada, mientras que **AWS** destaca por ofrecer los salarios m√°s altos."
    " En cuanto a habilidades, la **proactividad** es la m√°s demandada junto con trabajo en equipo, mientras que **programador**,"
    " es la menos solicitada y con menor remuneraci√≥n. ")

    ######################################### Segunda grafica

    consulta_top_niveles = """
    WITH top_niveles AS (
        SELECT 
            nivel_profesional,
            COUNT(id_oferta) AS total_ofertas
        FROM ofertas
        WHERE nivel_profesional IS NOT NULL
        GROUP BY nivel_profesional
        ORDER BY total_ofertas DESC
        LIMIT 2
    )
    SELECT 
        o.salario_desde,
        o.salario_hasta,
        o.nivel_profesional,
        CASE
            WHEN o.experiencia IN ("M√°s de 10 a√±os", "M√°s de 5 a√±os") THEN "M√°s de 5 a√±os"
            WHEN o.experiencia IN ("3-5 a√±os", "3 a√±os", "2 a√±os") THEN "2-5 a√±os"
            ELSE "Menos de 2 a√±os"
        END AS experiencia_agrupada
    FROM ofertas o
    JOIN top_niveles tn ON o.nivel_profesional = tn.nivel_profesional
    WHERE o.salario_desde IS NOT NULL
    AND o.salario_hasta IS NOT NULL
    AND o.experiencia IS NOT NULL;
    """

    # Cargar datos
    df = pd.read_sql(consulta_top_niveles, db)

    # Calcular salario bruto anual
    df["Salario bruto anual"] = df[["salario_desde", "salario_hasta"]].mean(axis=1)

    # Crear el gr√°fico con leyenda mejorada
    fig = px.histogram(
        df,
        x="Salario bruto anual",
        facet_row="nivel_profesional",
        color="experiencia_agrupada",
        nbins=30,
        labels={
            "Salario bruto anual": "Salario Bruto Anual (en miles de ‚Ç¨)",
            "count": "N√∫mero de ofertas",
            "experiencia_agrupada": "A√±os de experiencia requeridos"
        },
        title="Distribuci√≥n Salarial por Nivel Profesional y Experiencia",
        category_orders={
            "nivel_profesional": df["nivel_profesional"].value_counts().index.tolist(),
            "experiencia_agrupada": ["Menos de 2 a√±os", "2-5 a√±os", "M√°s de 5 a√±os"]
        },
        color_discrete_map={
            "Menos de 2 a√±os": "#1f77b4",
            "2-5 a√±os": "#ff7f0e",
            "M√°s de 5 a√±os": "#2ca02c"
        },
        barmode="group",
        opacity=0.9,
        height=800
    )

    # Personalizar la leyenda
    fig.update_layout(
        legend=dict(
        title=dict(
            text="A√±os de experiencia:",  
            font=dict(color="black")  
        ),
            orientation="v",
            yanchor="top",
            xanchor="right",
            y=1.02,
            x=1.15,
            bgcolor="rgba(255,255,255,0.9)",
            font=dict(color="black")
        ),
        hovermode="x unified",
        bargap=0.15,
        xaxis_title="Salario Bruto Anual (‚Ç¨)",
        yaxis_title="N√∫mero de ofertas"
    )

    # Ajustes adicionales
    fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]))
    fig.update_yaxes(matches=None, showticklabels=True)
    fig.update_traces(
        hovertemplate="<b>Rango salarial:</b> %{x}‚Ç¨<br><b>Ofertas:</b> %{y}"
    )

    # Mostrar el gr√°fico en Streamlit
    st.title("Distribuci√≥n Salarial por Nivel Profesional y Experiencia")
    st.plotly_chart(fig)
    
    st.write("La mayor concentraci√≥n de ofertas laborales corresponde a perfiles de Empleado con experiencia media (2-5 a√±os) y rangos salariales de 30.000-39.000‚Ç¨ anuales. Para posiciones junior (sin experiencia requerida), el grueso de oportunidades se concentra en la franja de 20.000-29.000‚Ç¨, evidenciando una correlaci√≥n directa entre a√±os de experiencia y nivel retributivo en el mercado laboral analizado.")

################################################### Tercera Grafica

    # Creamos el gr√°fico de caja (box plot)
    import plotly.graph_objects as go
    consulta_sql = """
    SELECT 
        c.ciudad,
        (o.salario_desde + o.salario_hasta) / 2 AS salario_promedio
    FROM ofertas o
    INNER JOIN ciudades c ON o.id_oferta = c.id_oferta
    INNER JOIN ciudades_coordenadas cc ON c.ciudad = cc.ciudad
    WHERE cc.pais = "Espa√±a"
    AND o.salario_desde IS NOT NULL 
    AND o.salario_hasta IS NOT NULL
    AND c.ciudad IN (
        SELECT c2.ciudad
        FROM ciudades c2
        INNER JOIN ofertas o2 ON c2.id_oferta = o2.id_oferta
        GROUP BY c2.ciudad
        HAVING COUNT(*) > 3
    );
    """

    df = pd.read_sql(consulta_sql, db)
    ciudades = df["ciudad"].unique().tolist()

    fig = go.Figure()
    fig.add_trace(
        go.Box(
            x=df["ciudad"],
            y=df["salario_promedio"],
            visible=True,
            name="Todas"
        )
    )

    for ciudad in ciudades:
        df_ciudad = df[df["ciudad"] == ciudad]
        fig.add_trace(
            go.Box(
                x=df_ciudad["ciudad"],
                y=df_ciudad["salario_promedio"],
                visible=False,
                name=ciudad
            )
        )

    botones = []
    botones.append({
        "label": "Todas las ciudades",
        "method": "update",
        "args": [{"visible": [True] + [False]*len(ciudades)}]
    })

    for i, ciudad in enumerate(ciudades):
        visibilidad = [False]*(len(ciudades)+1)
        visibilidad[i+1] = True
        
        botones.append({
            "label": ciudad,
            "method": "update",
            "args": [{"visible": visibilidad}]
        })

    fig.update_layout(
        updatemenus=[{
            "buttons": botones,
            "direction": "down",
            "showactive": True,
            "x": 0.5,
            "xanchor": "center",
            "y": 1.15,
            "yanchor": "top"
        }],
        title="Distribuci√≥n de salarios por ciudad",
        showlegend=False,
        xaxis_title="Ciudad",
        yaxis_title="Salario Promedio (‚Ç¨)"
    )

    st.title("An√°lisis de Salarios por Ciudad")
    st.plotly_chart(fig)

    
    st.write("En esta gr√°fica con desplegable, podemos ver con detalle la distribuci√≥n de salarios por ciudad. Destacan algunas ciudades como √Ålava y Bizkaia con una gran cantidad de ofertas. Madrid y Barcelona se caracterizan por tener ofertas con salarios con unos sueldos mayores, fuera de los datos normales.")
    

################################################# Cuarta grafica

    st.title("An√°lisis de Salarios por tecnolog√≠a y experiencia")
    query = """
    WITH top_tecnologias AS (
        SELECT 
            t.tecnologia,
            COUNT(*) AS num_ofertas
        FROM tecnologias_relacion tr
        JOIN tecnologias t ON tr.tec_id = t.tec_id
        JOIN ofertas o ON tr.id_oferta = o.id_oferta
        WHERE o.salario_desde IS NOT NULL 
        AND o.salario_hasta IS NOT NULL
        AND o.experiencia IS NOT NULL
        GROUP BY t.tecnologia
        ORDER BY num_ofertas DESC
        LIMIT 5
    )
    SELECT 
        t.tecnologia AS Tecnologia,
        (o.salario_desde + o.salario_hasta) / 2 AS Salario,
        CASE
            WHEN o.experiencia IN ("M√°s de 10 a√±os", "M√°s de 5 a√±os") THEN "M√°s de 5 a√±os"
            WHEN o.experiencia IN ("3-5 a√±os", "3 a√±os", "2 a√±os") THEN "Entre 2 y 5 a√±os"
            WHEN o.experiencia IN ("1 a√±o", "Menos de un a√±o", "Sin Experiencia") THEN "Menos de 2 a√±os"
            ELSE "Otros"
        END AS Experiencia_agrupada
    FROM tecnologias_relacion tr
    JOIN tecnologias t ON tr.tec_id = t.tec_id
    JOIN ofertas o ON tr.id_oferta = o.id_oferta
    JOIN top_tecnologias tt ON t.tecnologia = tt.tecnologia
    WHERE o.salario_desde IS NOT NULL 
    AND o.salario_hasta IS NOT NULL
    AND o.experiencia IS NOT NULL;
    """

    # Ejecutar la consulta y obtener los resultados en un DataFrame de pandas
    df_boxplot = pd.read_sql(query, db)

    # Definir el orden de las categor√≠as agrupadas
    orden_experiencia = ["M√°s de 5 a√±os", "Entre 2 y 5 a√±os", "Menos de 2 a√±os"]

    # Crear el gr√°fico de boxplot con Plotly
    fig = px.box(
        df_boxplot,
        x="Experiencia_agrupada",
        y="Salario",
        color="Tecnologia",
        title="Distribuci√≥n de Salarios por Tecnolog√≠a y Experiencia",
        labels={"Salario": "Salario (‚Ç¨)", "Experiencia_agrupada": "A√±os de Experiencia"},
        category_orders={"Experiencia_agrupada": orden_experiencia}
    )

    # Personalizar el layout del gr√°fico
    fig.update_layout(
        xaxis_title="A√±os de experiencia",
        yaxis_title="Salario (en miles de ‚Ç¨)",
        legend_title="Tecnolog√≠a",
        boxmode="group"  # Agrupar los boxplots por categor√≠a de experiencia
    )

    # Mostrar el gr√°fico en Streamlit
    st.plotly_chart(fig)


    st.write("El diagrama de caja muestra la relaci√≥n entre tecnolog√≠as clave (Azure, Python, SQL, SAP EWM, Peoplesoft), niveles de experiencia (eje x) y distribuci√≥n salarial (eje y). Peoplesoft, software de gesti√≥n empresarial y recursos humanos, presenta los salarios m√°s altos en roles senior (+5 a√±os), mientras que Azure destaca en posiciones junior (<2 a√±os). Los rangos salariales son homog√©neos en experiencia media,evidenciando una correlaci√≥n directa entre a√±os de experiencia exigidos y remuneraci√≥n ofertada.")


################################################################################GRAFICO QUINTO

    consulta = """
    SELECT 
        empresa,
        COUNT(id_oferta) AS numero_puestos,
        SUM(cvs_inscritos) AS total_candidatos,
        SUM(cvs_inscritos) AS candidatos_por_puesto
    FROM ofertas
    GROUP BY empresa
    ORDER BY numero_puestos DESC
    LIMIT 10;
    """

    df = pd.read_sql(consulta, db)
    df = df[df["empresa"] != "nuestra pol√≠tica al respecto"]

    st.title("Relaci√≥n entre Candidatos y Puestos por Empresa")

    fig = px.bar(df,
                x="total_candidatos",
                y="empresa",
                orientation="h",
                color="numero_puestos",
                title="Relaci√≥n entre candidatos y puestos por empresa",
                labels={
                    "total_candidatos": "Total candidatos inscritos",
                    "empresa": "",
                    "numero_puestos": "N√∫mero de puestos"
                })

    fig.update_layout(
        yaxis={"categoryorder": "total ascending"},
        coloraxis_colorbar=dict(
            title="Puestos ofertados", 
            title_side="top"
        )
    )

    st.plotly_chart(fig)

    st.write("El an√°lisis de competitividad laboral revela una marcada disparidad en las oportunidades de acceso: "
    "Michel Page, l√≠der en oferta con 620 vacantes, presenta un ratio de 1,4% de √©xito (44.285 candidatos),"
    " mientras que en el extremo inferior (168 vacantes/4.058 candidatos) la probabilidad alcanza el 4,14%, cuadruplicando las opciones."
    " Estos datos evidencian mayor presi√≥n selectiva en empresas con amplia oferta frente a mercados nicho con menor competencia,"
    " subrayando la necesidad de estrategias diferenciadoras para candidatos y pol√≠ticas de contrataci√≥n basadas en datos.")

    st.write("-------------------------------------------------------------------------------------------------------------------------------------")
    config = toml.load(".streamlit/secrets.toml")
    db_config = config["database"]

    db = mysql.connector.connect(
        host=db_config["host"],
        user=db_config["user"],
        password=db_config["password"],
        database=db_config["database"])

    # Crear un cursor
    cursor = db.cursor()

    # Consulta SQL
    query = "SELECT * FROM ofertas"

    # Cargar datos en un DataFrame usando el cursor
    df = pd.read_sql(query, db)

    # Cerrar la conexi√≥n
    cursor.close()
    db.close()

    with st.expander(label = "Despliega todas las ofertas", expanded = False):
        st.dataframe(df)
   
@st.cache_data
def load_data():
    config = toml.load(".streamlit/secrets.toml")
    db_config = config["database"]

    db = mysql.connector.connect(
        host=db_config["host"],
        user=db_config["user"],
        password=db_config["password"],
        database=db_config["database"])

    # Consulta SQL
    query = "SELECT * FROM ofertas"

    # Cargar los datos en un DataFrame
    df = pd.read_sql(query, db)

    # Cerrar la conexi√≥n a la base de datos
    db.close()

    # Almacenar el DataFrame en session_state para que sea accesible en toda la aplicaci√≥n
    st.session_state.df = df

# Llamar a la funci√≥n load_data() para cargar los datos en session_state cuando se inicia la app
if "df" not in st.session_state:
    load_data()

# Ahora puedes acceder a st.session_state.df en cualquier parte de tu app, por ejemplo:
def busqueda():
    # Asegurarse de que df_filtrado y selected_jobs est√©n inicializados
    if "selected_jobs" not in st.session_state:
        st.session_state.selected_jobs = []  
    
    if "df_filtrado" not in st.session_state:
        st.session_state.df_filtrado = pd.DataFrame() 

    # T√≠tulos
    st.markdown(
    """
    <div style="text-align: center;">
        <h1>BUSCA Y COMPARA EMPLEOS üîé</h1>
        <h3>Explora ofertas de empleo IT en Espa√±a</h3>
        <p style="font-size: 18px;">
            - Realiza un filtrado en la interfaz inferior para encontrar tu empleo -
        </p>
    </div>
    """,
    unsafe_allow_html=True
    )

    # Formulario de b√∫squeda
    with st.form(key="search_form"):
        job_title = st.text_input("T√≠tulo del trabajo", "").strip().lower()
        location = st.text_input("Ubicaci√≥n", "").strip().lower()
        company = st.text_input("Empresa", "").strip().lower()
        salario_desde, salario_hasta = st.slider(
            "Rango de salario",
            min_value=0,
            max_value=200,
            value=(0, 100),
            step=5
        )
        
        submit_button = st.form_submit_button("Buscar")

    # Cuando se env√≠a el formulario, filtrar los resultados
    if submit_button:
        # Asegurarse de que df est√° cargado
        if "df" not in st.session_state or st.session_state.df.empty:
            st.write("No hay datos disponibles para filtrar.")
            return
        
        # Filtrar df seg√∫n la b√∫squeda
        st.session_state.df_filtrado = st.session_state.df[
            (st.session_state.df["titulo"].str.lower().str.contains(job_title, na=False)) &
            (st.session_state.df["ciudad"].str.lower().str.contains(location, na=False)) &
            (st.session_state.df["empresa"].str.lower().str.contains(company, na=False)) &
            (st.session_state.df["salario_desde"] >= salario_desde) &
            (st.session_state.df["salario_hasta"] <= salario_hasta)
        ]

        # Mostrar resultados
        st.write(f"Resultados para: {job_title} {location} {company} entre {salario_desde}K y {salario_hasta}K/‚Ç¨")
        
        if not st.session_state.df_filtrado.empty:
            st.dataframe(st.session_state.df_filtrado)
        else:
            st.write("No se encontraron resultados.")

    # Aqu√≠ puedes continuar con la l√≥gica de trabajo seleccionados y gr√°ficos (como antes)
    if "titulo" not in st.session_state.df_filtrado.columns:
        st.write("")  # Evita error si no hay datos filtrados
    else:
        selected_jobs = [
            job for job in st.session_state.selected_jobs if job in st.session_state.df_filtrado["titulo"].tolist()
        ]

        # Selecci√≥n m√∫ltiple para comparar trabajos
        selected_jobs = st.multiselect(
            "Selecciona trabajos para comparar", 
            st.session_state.df_filtrado["titulo"].tolist(), 
            default=selected_jobs, 
            format_func=lambda x: f"üíº {x}"
        )

        # Actualizar trabajos seleccionados
        if selected_jobs != st.session_state.selected_jobs:
            st.session_state.selected_jobs = selected_jobs

        # Filtrar los trabajos seleccionados y mostrar gr√°ficos
        if selected_jobs:
            df_selected = st.session_state.df_filtrado[st.session_state.df_filtrado["titulo"].isin(selected_jobs)]

            # Comparaci√≥n de salarios con Plotly
            import plotly.express as px
            custom_colors = ["#FFA500", "#FFFFFF"]
            fig = px.bar(df_selected, 
                        x="titulo", 
                        y=["salario_desde", "salario_hasta"], 
                        title="Comparaci√≥n de Salarios de los Trabajos Seleccionados",
                        labels={"titulo": "Trabajo", "salario_desde": "Salario M√≠nimo", "salario_hasta": "Salario M√°ximo"},
                        barmode="group",
                        color_discrete_sequence=custom_colors)
            st.plotly_chart(fig, use_container_width=True)

    


def informacion_pbi():
    ##Titulos
    st.markdown(
    """
    <div style="text-align: center;">
        <h1>INFORMACION ADICIONAL CON PBI üìä</h1>
        <h3>Conoce mejor tu futuro empleo</h3>
        <p style="font-size: 18px;">
            - Navega comodamente en la interfaz y encuentra el empleo mas adecuado para t√≠ -
        </p>
    </div>
    """,
    unsafe_allow_html=True
)
    
    powerbi_width = 600
    powerbi_height = 373.5
    st.markdown(
        body=f"""
        <iframe title="Proyecto Final" width="1400" height="850" 
        src="https://app.powerbi.com/view?r=eyJrIjoiOWQ5NzJkZWEtZjAwZS00MDY4LThhMmUtNDg3ZDJhODFkYTI0IiwidCI6IjVlNzNkZTM1LWU4MjUtNGVkNS1iZTIyLTg4NTYzNTI3MDkxZSIsImMiOjl9&pageName=2c80c0101e4ee066730c" 
        frameborder="0" allowFullScreen="true"></iframe>
        """,
        unsafe_allow_html=True
    )
def clustering_clasificacion():
    ##Titulos
    st.markdown(
    """
    <div style="text-align: center;">
        <h1>CLUSTERING Y CLASIFICACI√ìN üåê</h1>
        <h3>Conoce mejor tu futuro empleo</h3>
        <p style="font-size: 18px;">
            - Navega comodamente en la interfaz y encuentra el empleo mas adecuado para t√≠ -
        </p>
    </div>
    """,
    unsafe_allow_html=True
)
    
    # Cargar los DataFrames
    df_general_cluster = pd.read_csv("Streamlit/Data/df_imputado_final_clusterizado.csv")
    df_cluster = pd.read_csv("Streamlit/Data/df_clusters.csv")
    colores = {
        0: "rgba(46, 139, 87, 0.5)",
        1: "rgba(191, 0, 255, 1)",
        2: "rgba(255, 100, 0, 1)"
    }
    st.markdown(
        """
        <h1 style="text-align: center;">CLASIFICACI√ìN DE OFERTAS ‚òÅÔ∏è</h1>
        <p style="text-align: center; font-size: 20px;">
            -Echa un vistazo a nuestro estudio de clustering sobre las ofertas de empleo en nuestra base de datos-
        </p>
        """,
        unsafe_allow_html=True
    )
    # Inicializar el estado de sesi√≥n si no existe
    if "show_original" not in st.session_state:
        st.session_state.show_original = True  # Mostrar el DataFrame original al inicio
    if "df_to_show" not in st.session_state:
        st.session_state.df_to_show = df_cluster  # DataFrame a mostrar (original o ordenado)
    if "show_cluster_counts" not in st.session_state:
        st.session_state.show_cluster_counts = False  # Controlar si se muestran los conteos de clusters
    if "show_dbscan_plot" not in st.session_state:
        st.session_state.show_dbscan_plot = False  # Controlar si se muestra la gr√°fica de DBSCAN
    if "show_mean_comparison" not in st.session_state:
        st.session_state.show_mean_comparison = False  # Controlar si se muestra la comparaci√≥n de medias
    # Mostrar el DataFrame original solo si show_original es True
    if st.session_state.show_original:
        st.write("Comprobaci√≥n con diferentes EPS para obtenci√≥n del mejor cluster")
        st.dataframe(df_cluster)
    # Bot√≥n para ordenar el DataFrame por el Silhouette Score de mayor a menor
    if st.button("Obtener mejores EPS"):
        df_ordenado = df_cluster.sort_values(by="silhouette_score", ascending=False)
        st.session_state.df_to_show = df_ordenado
        st.session_state.show_original = False
        st.session_state.show_cluster_counts = True
    # Mostrar el DataFrame ordenado y la gr√°fica de conteo de clusters
    if not st.session_state.show_original and st.session_state.show_cluster_counts:
        col1, col2 = st.columns([2, 2])
        with col1:
            st.markdown("<h3 style='text-align: center;'>Revisi√≥n del EPS m√°s adecuado para clasificaci√≥n</h3>", unsafe_allow_html=True)
            st.dataframe(st.session_state.df_to_show)
        with col2:
            st.markdown("<h3 style='text-align: center;'>Clusters resultantes tras escoger el mejor EPS", unsafe_allow_html=True)
            cluster_counts = df_general_cluster["Cluster"].value_counts()
            fig = go.Figure()
            for cluster, count in cluster_counts.items():
                fig.add_trace(go.Bar(
                    x=[cluster],
                    y=[count],
                    name=f"Cluster {cluster}",
                    marker_color=colores.get(cluster, "rgba(128, 128, 128, 1)")
                ))
            fig.update_layout(title="Conteo de Clusters", xaxis_title="Cluster")
            st.plotly_chart(fig)
    # Bot√≥n para mostrar la gr√°fica de DBSCAN
    if st.button("Clasificaci√≥n con DBSCAN"):
        st.session_state.show_dbscan_plot = True
    # Mostrar la gr√°fica de DBSCAN
    if st.session_state.get("show_dbscan_plot", False):
        st.markdown("<h3 style='text-align: center;'>Visualizaci√≥n de los clusters generados por DBSCAN:</h3>", unsafe_allow_html=True)
        df_general_cluster["Cluster"] = df_general_cluster["Cluster"].astype("category")
        fig_dbscan = px.scatter(
            df_general_cluster,
            x="ciudad",
            y="salario_media",
            color="Cluster",
            color_discrete_map=colores,
            title="Clustering con DBSCAN",
            labels={"ciudad": "Ciudad", "salario_media": "Salario Medio"}
        )
        st.plotly_chart(fig_dbscan)
    # Bot√≥n para mostrar la comparaci√≥n de medias por cluster
    if st.button("Mostrar comparaci√≥n de medidas por Cluster"):
        st.session_state.show_mean_comparison = True
    # Mostrar la comparaci√≥n de medias por cluster
    if st.session_state.show_mean_comparison:
        st.markdown("<h3 style='text-align: center;'>Comparaci√≥n de valores medios por Cluster:</h3>", unsafe_allow_html=True)
        df_grouped = df_general_cluster.groupby(by="Cluster").mean().T
        df_long = df_grouped.reset_index().melt(id_vars="index", var_name="Cluster", value_name="Valor")
        fig_mean = px.bar(
            df_long,
            x="index",
            y="Valor",
            color="Cluster",
            color_discrete_sequence=list(colores.values()),
            barmode="group",
            labels={"index": "Caracter√≠sticas", "Valor": "Valor Medio"},
            title="Comparaci√≥n de valores medios por Cluster"
        )
        col1, col2 = st.columns([3, 1])
        with col1:
            st.plotly_chart(fig_mean, use_container_width=True)
        with col2:
            st.dataframe(df_grouped)
    
def arquitectura_sql():
    ##Titulos
    st.markdown(
    """
    <div style="text-align: center;">
        <h1>ARQUITECTURA SQL ‚õÅ</h1>
        <h3>As√≠ se ha estructurado nuestros datos</h3>
        <p style="font-size: 18px;">
            - Conoce la relaci√≥n de nuestros datos para la extracci√≥n de informaci√≥n -
        </p>
    </div>
    """,
    unsafe_allow_html=True
)
    
    st.write("---------------------------------------------")
    
    st.image("Streamlit/Data/DIAGRAMA_SQL.png", width=900)

    st.write("-----------------------------------------------")

    st.write("En nuestra base de datos SQL, las relaciones conectan tablas entre s√≠. Las relaciones m√°s comunes son: uno a uno, uno a muchos y muchos a muchos. Las claves primarias identifican de manera √∫nica los registros, mientras que las claves for√°neas vinculan tablas relacionadas. Las relaciones permiten realizar consultas complejas usando JOIN para combinar datos de varias tablas. Este enfoque garantiza la integridad y eficiencia de la base de datos.")
    

def about_us():
    ##Titulos
    st.markdown(
    """
    <div style="text-align: center;">
        <h1>ABOUT US ‚ù§Ô∏è
        <h3>¬°Con√≥cenos!</h3>
        <p style="font-size: 18px;">
            - Este es el equipo encargado de que puedas disfrutar de los mejores datos -
        </p>
    </div>
    """,
    unsafe_allow_html=True
)
    
    st.write("-------------------------------------------------------------------------")
    
    col1, col2, col3, col4 = st.columns(4)

    # Persona 1
    with col1:
        st.markdown(
        f"""
        <style>
            .circle-container {{
                text-align: center;  /* Centra todo el contenido */
            }}
            .circle-img {{
                width: 200px;
                height: 200px;
                border-radius: 50%;
                object-fit: cover;
                display: block;
                margin: 0 auto; /* Centrar imagen */
            }}
            .linkedin-link {{
                display: block;
                margin-top: 10px;
                font-size: 16px;
                font-weight: bold;
                text-decoration: none;
                color: #0077b5; /* Color LinkedIn */
            }}
        </style>
        <div class="circle-container">
            <img src="https://media.licdn.com/dms/image/v2/D4D03AQHAUDedAyCf1A/profile-displayphoto-shrink_800_800/B4DZVYJI61GcAc-/0/1740940546315?e=1746662400&v=beta&t=lEhQ0eNa2gJfx0QuuKkr6Bk1mG8VIKR7IjLETdyfKQg" class="circle-img">
            <br>
            <a href="https://www.linkedin.com/in/liam-gonzalez-villar-2994aa248" class="linkedin-link" target="_blank">-LinkedIn-</a>
        </div>
        """,
        unsafe_allow_html=True
    )

        st.markdown(
            """
            <style>
                .title-container {
                    text-align: center;
                }
                .main-title {
                    font-size: 40px;
                    font-weight: bold;
                    margin-bottom: 5px;
                    color : orange;
                }
                .subtitle {
                    font-size: 24px;
                    color: gray;
                }
            </style>
            <div class="title-container">
                <p class="main-title">Liam Gonzalez Villar</p>
                <p class="subtitle">Data Analyst</p>
            </div>
            """,
            unsafe_allow_html=True
        )


    # Persona 2
    with col2:
        st.markdown(
        f"""
        <style>
            .circle-container {{
                text-align: center;  /* Centra todo el contenido */
            }}
            .circle-img {{
                width: 200px;
                height: 200px;
                border-radius: 50%;
                object-fit: cover;
                display: block;
                margin: 0 auto; /* Centrar imagen */
            }}
            .linkedin-link {{
                display: block;
                margin-top: 10px;
                font-size: 16px;
                font-weight: bold;
                text-decoration: none;
                color: #0077b5; /* Color LinkedIn */
            }}
        </style>
        <div class="circle-container">
            <img src="https://i.imgur.com/eLBwCXj.jpeg" class="circle-img">
            <br>
            <a href="https://www.linkedin.com/in/liam-gonzalez-villar-2994aa248" class="linkedin-link" target="_blank">-LinkedIn-</a>
        </div>
        """,
        unsafe_allow_html=True
    )

        st.markdown(
            """
            <style>
                .title-container {
                    text-align: center;
                }
                .main-title-white {{
                font-size: 50px;
                font-weight: bold;
                margin-bottom: 5px;
                color: white; /* Solo para este t√≠tulo */
                }
                .subtitle {
                    font-size: 24px;
                    color: gray;
                }
            </style>
            <div class="title-container">
                <p class="main-title">Luis Mart√≠nez de la Riva Doallo</p>
                <p class="subtitle">Data Analyst</p>
            </div>
            """,
            unsafe_allow_html=True
        )

    # Persona 3
    with col3:
        st.markdown(
        f"""
        <style>
            .circle-container {{
                text-align: center;  /* Centra todo el contenido */
            }}
            .circle-img {{
                width: 200px;
                height: 200px;
                border-radius: 50%;
                object-fit: cover;
                display: block;
                margin: 0 auto; /* Centrar imagen */
            }}
            .linkedin-link {{
                display: block;
                margin-top: 10px;
                font-size: 16px;
                font-weight: bold;
                text-decoration: none;
                color: #0077b5; /* Color LinkedIn */
            }}
        </style>
        <div class="circle-container">
            <img src="https://media.licdn.com/dms/image/v2/D5603AQEK5WIc8prgEQ/profile-displayphoto-shrink_200_200/B56ZV_TsohHoAY-/0/1741597625372?e=1747267200&v=beta&t=1EHrFoRLCBGPFJ2I3P_n3JYhXf9wDBs1LAfTYzuXUrQ" class="circle-img">
            <br>
            <a href="https://www.linkedin.com/in/raquel-barbeito-garcia-783497319/" class="linkedin-link" target="_blank">-LinkedIn-</a>
        </div>
        """,
        unsafe_allow_html=True
    )

        st.markdown(
            """
            <style>
                .title-container {
                    text-align: center;
                }
                .main-title {
                    font-size: 40px;
                    font-weight: bold;
                    margin-bottom: 5px;
                    color : orange;
                }
                .subtitle {
                    font-size: 24px;
                    color: gray;
                }
            </style>
            <div class="title-container">
                <p class="main-title">Raquel Barbeito Garcia</p>
                <p class="subtitle">Data Analyst</p>
            </div>
            """,
            unsafe_allow_html=True
        )

    # Persona 4
    with col4:
        st.markdown(
        f"""
        <style>
            .circle-container {{
                text-align: center;  /* Centra todo el contenido */
            }}
            .circle-img {{
                width: 200px;
                height: 200px;
                border-radius: 50%;
                object-fit: cover;
                display: block;
                margin: 0 auto; /* Centrar imagen */
            }}
            .linkedin-link {{
                display: block;
                margin-top: 10px;
                font-size: 16px;
                font-weight: bold;
                text-decoration: none;
                color: #0077b5; /* Color LinkedIn */
            }}
        </style>
        <div class="circle-container">
            <img src="https://media.licdn.com/dms/image/v2/D4E03AQHHCjJEhF6yTg/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1714734604277?e=1746662400&v=beta&t=UGM21u5Qnhs4G__Ih8m0nyeP15r7tP-CH54MGHFKIGI" class="circle-img">
            <br>
            <a href="https://www.linkedin.com/in/joshua-metcalf/" class="linkedin-link" target="_blank">-LinkedIn-</a>
        </div>
        """,
        unsafe_allow_html=True
    )

        st.markdown(
            """
            <style>
                .title-container {
                    text-align: center;
                }
                .main-title {
                    font-size: 40px;
                    font-weight: bold;
                    margin-bottom: 5px;
                    color : orange;
                }
                .subtitle {
                    font-size: 24px;
                    color: gray;
                }
            </style>
            <div class="title-container">
                <p class="main-title">Joshua Metcalf</p>
                <p class="subtitle">Data Analyst</p>
            </div>
            """,
            unsafe_allow_html=True
        )

    st.write("----------------------------------------------")


    # URL del repositorio
    repo_url = "https://github.com/LiamGVillar/PFB-Empleo"

    # URL de la imagen del logo de GitHub
    github_logo_url = "https://pngimg.com/d/github_PNG71.png"

    st.markdown("""
        <div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">
            <a href="{}" target="_blank">
                <button style="border: none; background: transparent; cursor: pointer;">
                    <img src="{}" alt="GitHub Logo" style="width: 100px; height: 100px;"/>
                </button>
            </a>
            <p style="text-align: center; font-size: 16px; color: #440;">Visita nuestro repositorio de GitHub</p>
        </div>
    """.format(repo_url, github_logo_url), unsafe_allow_html=True)



    st.write("---------------------------------------------------")
    st.write("Somos un equipo apasionado por la innovaci√≥n y el an√°lisis de datos, comprometido con ofrecer soluciones tecnol√≥gicas que faciliten la toma de decisiones informadas. Nuestra misi√≥n es proporcionar herramientas intuitivas y poderosas que permitan a nuestros usuarios explorar, comprender y utilizar los datos de manera eficiente. Con un enfoque en la simplicidad y la eficacia, nos esforzamos por crear experiencias que transformen la forma en que las personas interact√∫an con la informaci√≥n, impulsando el √©xito tanto en el √°mbito profesional como personal.")


def predictor ():
    
    st.title("Calculadora de Salario para Creaci√≥n de Ofertas de Empleo")

    # Agregamos un identificador a la caja de contrase√±a
    password = st.text_input("Introduce la contrase√±a:", type="password", key="password_input_1")
    correct_password = "faltalogaritmo_siu"

    if password != correct_password:
        if password:  # Solo muestra el error si el usuario ha intentado introducir una contrase√±a
            st.error(":x: Acceso restringido a usuarios registrados. Contacta con soporte para crear tu cuenta profesional.")
            # CSS vibraci√≥n si contrase√±a es incorrecta.
            st.markdown(
                """
                <style>
                @keyframes shake {
                    0% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    50% { transform: translateX(5px); }
                    75% { transform: translateX(-5px); }
                    100% { transform: translateX(0); }
                }
                .stTextInput input {
                    animation: shake 0.3s ease-in-out;
                    border: 2px solid red !important;
                }
                </style>
                """,
                unsafe_allow_html=True
            )
        return  # Salir de la funci√≥n si la contrase√±a es incorrecta

    df_general = pd.read_csv("Streamlit/Data/df_imputado.csv")
    objects_loaded = joblib.load("Streamlit/Data/transformadores_y_modelo_regresion_salario.pkl")
    encoder, scaler, imputer, model = objects_loaded["encoder"], objects_loaded["scaler"], objects_loaded["imputer"], objects_loaded["model"]

    # Subt√≠tulo de la secci√≥n
    st.subheader("Introduce los datos de la oferta que deseas publicar para comprobar el salario estimado seg√∫n nuestra base de datos.")

    # Dividimos la p√°gina en tres columnas
    col1, col2, col3 = st.columns(3)

    with col1:
        ciudad = st.selectbox(
            "Ciudad",
            ["Madrid", "100% Remoto", "Barcelona", "Valencia", "M√°laga", "Bizkaia", "Zaragoza", "A Coru√±a", "Sevilla", "Gipuzkoa", "No Especificado", "Alicante", "Valladolid", "Pontevedra", "Navarra", "Asturias", "Castell√≥n", "√Ålava", "Girona", "Baleares", "Cantabria", "La Rioja", "C√≥rdoba"],
            key="ciudad_selectbox"
        )
        jornada_tipo = st.selectbox(
            "Tipo de jornada laboral",
            ["Jornada Completa", "Media Jornada", "Flexible", "Intensiva Ma√±ana", "Turno Rotatorio"],
            key="jornada_tipo_selectbox"
        )
        experiencia = st.slider(
            "Experiencia requerida (a√±os)",
            0, 10, 1,
            key="experiencia_slider"
        )

    with col2:
        funciones = st.selectbox(
            "Funciones:",
            ["Programador", "Consultor", "Analista Programador", "Ingenieros/Industria", "Big Data", "Jefe de Proyecto", "Ciberseguridad", "Analista", "T√©cnico de Sistemas", "Arquitecto TIC", "Desarrollador Web", "Marketing", "DevOps", "Administrador", "Soporte T√©cnico", "Tester", "Redes", "Jefe de Equipo", "Electr√≥nica", "Helpdesk", "Desarrollador M√≥vil", "Base de Datos/DBA", "Inteligencia Artificial/Machine Learning", "Dise√±o gr√°fico", "Sistemas de Calidad", "T√©cnico de Gesti√≥n", "Responsable de Producto", "Comercial", "Auditor", "I+D"],
            key="funciones_selectbox"
        )
        contrato_tipo = st.selectbox(
            "Tipo de contrato",
            ["Indefinido", "Temporal", "Pr√°cticas", "Freelance/Aut√≥nomo"],
            key="contrato_tipo_selectbox"
        )
        nivel_profesional = st.selectbox(
            "Nivel profesional",
            ["Empleado", "Especialista", "Mando Intermedio", "Director"],
            key="nivel_profesional_selectbox"
        )

    with col3:
        formacion_minima = st.selectbox(
            "Formaci√≥n m√≠nima requerida:",
            ["FP2/Grado Superior", "Grado Medio", "Ingeniero T√©cnico", "Sin estudios", "Grado EEES (Bolonia)", "E.S.O. (Educaci√≥n Secundaria Obligatoria)", "Ingeniero Superior", "FP1", "Licenciado", "Bachillerato/COU", "Postgrado EEES (M√°ster)", "Diplomado", "Otros t√≠tulos, certificaciones y carnets", "Certificado de Profesionalidad", "Otra Formaci√≥n Tecnol√≥gica", "Doctorado"],
            key="formacion_minima_selectbox"
        )
        idioma = st.selectbox(
            "Idiomas requeridos:",
            ["--","Ingl√©s", "Espa√±ol", "Catal√°n", "Franc√©s", "Alem√°n", "Italiano", "Euskera", "Noruego"],
            key="idioma_selectbox"
        )
        teletrabajo = st.selectbox(
            "Teletrabajo",
            ["Presencial", "H√≠brido", "Remoto"],
            key="teletrabajo_selectbox"
        )

    # A√±adir tecnolog√≠a y habilidades en la parte de abajo
    tecnologias = st.multiselect(
        "Tecnolog√≠as requeridas:",
        ["sap ewm", "python", "sql", "AWS", "JavaScript", "Python", "peoplesoft", "Docker", "aws", "React"],
        key="tecnologias_multiselect"
    )
    habilidades = st.multiselect(
        "Habilidades requeridas:",
        ["Programador", "Proactividad", "Trabajo en equipo", "Aprendizaje Continuo", "Capacidad de autogesti√≥n"],
        key="habilidades_multiselect"
    )

    # Continuar con la l√≥gica para predecir el salario y dem√°s funcionalidades
    vacaciones_moda = df_general["vacaciones"].mode()[0]
    # Crear el dataframe de entrada del usuario
    user_input = pd.DataFrame({
        "variable": [0],
        "vacaciones": [vacaciones_moda],
        "teletrabajo": [teletrabajo],
        "jornada_tipo": [jornada_tipo],
        "funciones": [funciones],
        "contrato_tipo": [contrato_tipo],
        "nivel_profesional": [nivel_profesional],
        "formacion_minima": [formacion_minima],
        "personas_a_cargo": [0],
        "experiencia": [experiencia],
        "idioma": [-1 if idioma == "Ning√∫n idioma" else idioma],  # Asignar -1 si no se selecciona ning√∫n idioma
        "ciudad": [ciudad]
    }, index=[0])
    # A√±adimos tecnolog√≠as y habilidades
    for tech in ["sap ewm", "python", "sql", "AWS", "JavaScript", "Python", "peoplesoft", "Docker", "aws", "React"]:
        user_input[tech] = 1 if tech in tecnologias else 0
    for habilidad in ["Programador", "Proactividad", "Trabajo en equipo", "Aprendizaje Continuo", "Capacidad de autogesti√≥n"]:
        user_input[habilidad] = 1 if habilidad in habilidades else 0
    #encoder
    for column in encoder.keys():
        if column in user_input.columns:
            if isinstance(encoder[column], dict):  # Si es un mapeo de categor√≠as
                user_input[column] = user_input[column].map(encoder[column])
            elif encoder[column] is not None:  # Si hay un valor espec√≠fico (como la moda de "vacaciones")
                user_input[column] = encoder[column]
    expected_columns = scaler.feature_names_in_
    missing_columns = [col for col in expected_columns if col not in user_input.columns]
    for col in missing_columns:
        user_input[col] = 0  # A√±adir columnas faltantes con valores por defecto
    user_input = user_input[expected_columns]
    #scaler
    user_input_scaled = scaler.transform(user_input)
    #imputer
    user_input_imputed = imputer.transform(user_input_scaled)
    user_input_imputed = np.delete(user_input_imputed, 0, axis=1) #eliminamos la columna salario, generada aleatoriamente, para poder usar el modelo.
    # Predicci√≥n
    if st.button("Predecir Salario"):
        salario_predicho = model.predict(user_input_imputed)
        # Desescalar salario
        salario_min = scaler.data_min_[0]  # Valor m√≠nimo del scaler para la primera caracter√≠stica
        salario_max = scaler.data_max_[0]  # Valor m√°ximo del scaler para la primera caracter√≠stica
        salario_range = salario_max - salario_min
        # Escala inversa:
        # Desescalamos usando la f√≥rmula inversa de MinMaxScaler
        salario_predicho_desescalado = salario_predicho * salario_range + salario_min
        mensaje_placeholder = st.empty()  # Espacio reservado para el mensaje
        for i in range(5):  # Repite 4 veces la animaci√≥n (puedes ajustar)
            puntos = "." * i
            mensaje_placeholder.write(f"‚åõ: Calculando el salario adecuado seg√∫n los par√°metros{puntos}")
            time.sleep(1)  # Peque√±a pausa para el efecto
        # Mostrar el resultado final
        mensaje_placeholder.write(f"‚úÖ: La estimaci√≥n del salario para una oferta con las caracter√≠sticas introducidas es: {salario_predicho_desescalado[0] * 1000:,.0f} ‚Ç¨")



with open("Streamlit/Data/dbscan_model.pkl", "rb") as f:
    dbscan = pickle.load(f)

def predecir_cluster():

    st.markdown("<h1 style='text-align: center;'>Calculadora de Cluster para Creaci√≥n de Ofertas de Empleo</h1>", unsafe_allow_html=True)
    # Agregamos un identificador a la caja de contrase√±a
    password = st.text_input("Introduce la contrase√±a:", type="password", key="password_input")
    correct_password = "faltalogaritmo_siu"
    if password != correct_password:
        if password:  # Solo muestra el error si el usuario ha intentado introducir una contrase√±a
            st.error(":x: Acceso restringido a usuarios registrados. Contacta con soporte para crear tu cuenta profesional.")
            # CSS vibraci√≥n si contrase√±a es incorrecta.
            st.markdown(
                """
                <style>
                @keyframes shake {
                    0% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    50% { transform: translateX(5px); }
                    75% { transform: translateX(-5px); }
                    100% { transform: translateX(0); }
                }
                .stTextInput input {
                    animation: shake 0.3s ease-in-out;
                    border: 2px solid red !important;
                }
                </style>
                """,
                unsafe_allow_html=True
            )
        return  # Salir de la funci√≥n si la contrase√±a es incorrecta
    # Si la contrase√±a es correcta, ejecutar el resto del c√≥digo
    df_general = pd.read_csv("Streamlit/Data/df_imputado_final.csv")
    with open("Streamlit/Data/encoder_clustering.pkl", "rb") as f:
        encoder = dill.load(f)
    with open("Streamlit/Data/scaler_clustering.pkl", "rb") as f:
        scaler = pickle.load(f)
    with open("Streamlit/Data/imputer_clustering.pkl", "rb") as f:
        imputer = pickle.load(f)
    with open("Streamlit/Data/modelo_regresion_clustering.pkl", "rb") as f:
        model = pickle.load(f)
    st.markdown(
    "<h1 style='text-align: center; font-size: 22px;'>Introduce los datos de la oferta que deseas publicar para saber a qu√© cluster pertenece</h1>", 
    unsafe_allow_html=True)
    # Crear columnas para los sliders
    col1, col2 = st.columns(2)
    with col1:
        salario_media = st.slider(
            "Salario anual",
            0, 154000, 40000,  # Rango de 0 a 154000, valor inicial 40000
            key="salario_media_slider"
        )
    with col2:
        experiencia = st.slider(
            "Experiencia requerida (a√±os)",
            0, 10, 1,  # Rango de 0 a 10, valor inicial 1
            key="experiencia_slider"
        )
    # Crear columnas para los select boxes y multiselects
    col3, col4, col5 = st.columns(3)
    with col3:
        teletrabajo = st.selectbox(
            "Teletrabajo",
            ["Presencial", "H√≠brido", "Remoto"],
            key="teletrabajo_selectbox"
        )
        ciudad = st.selectbox(
            "Ciudad",
            ["Madrid", "100% Remoto", "Barcelona", "Valencia", "M√°laga", "Bizkaia", "Zaragoza", "A Coru√±a", "Sevilla", "Gipuzkoa", "No Especificado", "Alicante", "Valladolid", "Pontevedra", "Navarra", "Asturias", "Castell√≥n", "√Ålava", "Girona", "Baleares", "Cantabria", "La Rioja", "C√≥rdoba"],
            key="ciudad_selectbox"
        )
        tecnologias = st.multiselect(
            "Tecnolog√≠as requeridas:",
            ["sap ewm", "python", "sql", "AWS", "JavaScript", "Python", "peoplesoft", "Docker", "aws", "React"],
            key="tecnologias_multiselect"
        )
    with col4:
        jornada_tipo = st.selectbox(
            "Tipo de jornada laboral",
            ["Jornada Completa", "Media Jornada", "Flexible", "Intensiva Ma√±ana", "Turno Rotatorio"],
            key="jornada_tipo_selectbox"
        )
        funciones = st.selectbox(
            "Funciones:",
            ["Programador", "Consultor", "Analista Programador", "Ingenieros/Industria", "Big Data", "Jefe de Proyecto", "Ciberseguridad", "Analista", "T√©cnico de Sistemas", "Arquitecto TIC", "Desarrollador Web", "Marketing", "DevOps", "Administrador", "Soporte T√©cnico", "Tester", "Redes", "Jefe de Equipo", "Electr√≥nica", "Helpdesk", "Desarrollador M√≥vil", "Base de Datos/DBA", "Inteligencia Artificial/Machine Learning", "Dise√±o gr√°fico", "Sistemas de Calidad", "T√©cnico de Gesti√≥n", "Responsable de Producto", "Comercial", "Auditor", "I+D"],
            key="funciones_selectbox"
        )
        habilidades = st.multiselect(
            "Habilidades requeridas:",
            ["Programador", "Proactividad", "Trabajo en equipo", "Aprendizaje Continuo", "Capacidad de autogesti√≥n"],
            key="habilidades_multiselect"
        )
    with col5:
        contrato_tipo = st.selectbox(
            "Tipo de contrato",
            ["Indefinido", "Temporal", "Pr√°cticas", "Freelance/Aut√≥nomo"],
            key="contrato_tipo_selectbox"
        )
        nivel_profesional = st.selectbox(
            "Nivel profesional",
            ["Empleado", "Especialista", "Mando Intermedio", "Director"],
            key="nivel_profesional_selectbox"
        )
        formacion_minima = st.selectbox(
            "Formaci√≥n m√≠nima requerida:",
            ["FP2/Grado Superior", "Grado Medio", "Ingeniero T√©cnico", "Sin estudios", "Grado EEES (Bolonia)", "E.S.O. (Educaci√≥n Secundaria Obligatoria)", "Ingeniero Superior", "FP1", "Licenciado", "Bachillerato/COU", "Postgrado EEES (M√°ster)", "Diplomado", "Otros t√≠tulos, certificaciones y carnets", "Certificado de Profesionalidad", "Otra Formaci√≥n Tecnol√≥gica", "Doctorado"],
            key="formacion_minima_selectbox"
        )
    # Crear el dataframe de entrada del usuario
    user_input = pd.DataFrame({
        "salario_media": [salario_media // 1000],
        "experiencia": [experiencia],
        "teletrabajo": [teletrabajo],
        "ciudad": [ciudad],
        "jornada_tipo": [jornada_tipo],
        "funciones": [funciones],
        "contrato_tipo": [contrato_tipo],
        "nivel_profesional": [nivel_profesional],
        "formacion_minima": [formacion_minima],
        "num_tecnologias": [len(tecnologias)],  # Contar el n√∫mero de tecnolog√≠as seleccionadas
        "num_habilidades": [len(habilidades)]   # Contar el n√∫mero de habilidades seleccionadas
    }, index=[0])
    # Aplicar el encoder
    for column in encoder.keys():
        if column in user_input.columns:
            if isinstance(encoder[column], dict):  # Si es un mapeo de categor√≠as
                user_input[column] = user_input[column].map(encoder[column])
            elif callable(encoder[column]):  # Si es una funci√≥n lambda
                user_input[column] = encoder[column](user_input)
            elif encoder[column] is not None:  # Si hay un valor espec√≠fico
                user_input[column] = encoder[column]
    # Asegurar que las columnas est√©n en el orden correcto
    expected_columns = scaler.feature_names_in_
    missing_columns = [col for col in expected_columns if col not in user_input.columns]
    for col in missing_columns:
        user_input[col] = 0  # A√±adir columnas faltantes con valores por defecto
    user_input = user_input[expected_columns]
    # Aplicar el scaler
    user_input_scaled = scaler.transform(user_input)
    # Aplicar el imputer
    user_input_imputed = imputer.transform(user_input_scaled)
    # Predicci√≥n del cluster
    if st.button("Predecir Cluster"):
        cluster_predicho = model.predict(user_input_imputed)
        st.success(f"El cluster predicho es: {cluster_predicho[0]}")
        if cluster_predicho[0] == 0:
            st.write("Representa la mayor parte del mercado laboral IT, con roles t√©cnicos operativos y de soporte, generalmente a jornada completa y con salarios m√°s bajos. Es el punto de entrada ideal para profesionales junior o aquellos que buscan estabilidad en funciones generales de IT.")
        elif cluster_predicho[0] == 1:
            st.write("Se enfoca en perfiles altamente especializados con salarios m√°s altos y una fuerte presencia del teletrabajo. Es el m√°s atractivo para profesionales con experiencia en desarrollo de software, ciberseguridad o consultor√≠a IT.")
        elif cluster_predicho[0] == 2:
            st.write("Comprende roles cr√≠ticos de infraestructura IT con disponibilidad 24/7, demandando experiencia avanzada. Aunque menos frecuente, es esencial en sectores que requieren supervisi√≥n constante, como telecomunicaciones, finanzas y salud.")





# Inyectar CSS para cambiar el color del sidebar
st.markdown(
    """
    <style>
        [data-testid="stSidebar"] {
            background-color: white !important;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# Inicializar el estado de la p√°gina
if "page" not in st.session_state:
    st.session_state.page = "üè†"


pages = {
    "üè†" : pagina_principal,
    "Muestra de datos" : muestra_datos,
    "Busqueda empleos" : busqueda,
    "Informacion PBI" : informacion_pbi,
    "Clustering y Clasificaci√≥n" : clustering_clasificacion,
    "Arquitectura de SQL" : arquitectura_sql,
    "About us" : about_us,
    "Calculadora de salario üíé" : predictor,
    "Calculadora de cluster üíé" : predecir_cluster
}

if st.session_state.page not in pages.keys():
    st.session_state.page = "üè†"


manfredimg = Image.open("Streamlit/Data/manfred.png")
tecnoempleoimg = Image.open("Streamlit/Data/tecnoempleo.png")

st.sidebar.image("https://cdn.prod.website-files.com/5f3108520188e7588ef687b1/64e7429d8afae2bb6f5acd85_logo-hab-pez.svg", use_container_width=True)

# Funci√≥n para convertir imagen a base64
def img_to_base64(image):
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()


# Mostrar im√°genes dentro de columnas con enlaces
col1, col2 = st.sidebar.columns(2)

with col1:
    st.markdown(
    f'<a href="{manfred_url}" target="_blank">'
    f'<img src="data:image/png;base64,{img_to_base64(manfredimg)}" width="100%"></a>',
    unsafe_allow_html=True
)

# Enlace y mostrar imagen para la columna 2 (Tecnoempleo)
with col2:
    st.markdown(
        f'<a href="{tecnoempleo_url}" target="_blank">'
        f'<img src="data:image/png;base64,{img_to_base64(tecnoempleoimg)}" width="100%"></a>',
        unsafe_allow_html=True)


st.sidebar.markdown(
    "<h1 style='color: black;'>Navegaci√≥n</h1>",
    unsafe_allow_html=True
)


if st.sidebar.button("üè†"):
    st.session_state.page = "üè†"
    st.rerun()

st.sidebar.markdown(
    """
    <style>
    /* Cambiar color del t√≠tulo "Selecciona una vista" */
    .stSelectbox label {
        color: black !important;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)


# Selector para navegar entre p√°ginas
selected_page = st.sidebar.selectbox("Selecciona una vista", list(pages.keys()), index=list(pages.keys()).index(st.session_state.page))

# Actualizar solo si el usuario cambia la selecci√≥n en el selectbox
if selected_page != st.session_state.page:
    st.session_state.page = selected_page
    st.rerun()

pages[st.session_state.page]()

# Bot√≥n "Predecir" (Calculadora de salario)
st.sidebar.markdown("<p style='color: black;'>Opci√≥n disponible para usuarios Premium</p>", unsafe_allow_html=True)
if st.sidebar.button("Calculadora de salario üíé"):
    st.session_state.page = "Calculadora de salario üíé"  # Actualiza la p√°gina para mostrar la predicci√≥n
    st.rerun()  # Refresca la app para que se actualicen los cambios

# Bot√≥n "Predecir" (Calculadora de cluster)
if st.sidebar.button("Calculadora de cluster üíé"):
    st.session_state.page = "Calculadora de cluster üíé"  # Actualiza la p√°gina para mostrar la predicci√≥n
    st.rerun()  # Refresca la app para que se actualicen los cambios



st.sidebar.markdown("<br>" * 9, unsafe_allow_html=True)
st.sidebar.markdown(
    "<p style='color: black;'>App en versi√≥n de pruebas</p>",
    unsafe_allow_html=True
)